// Minified PDF.js library
export const GlobalWorkerOptions={workerSrc:""};export async function getDocument(e){const t=new PDFParser(e.data);await t.parse();return{numPages:t.numPages,getPage:e=>t.getPage(e)}}class PDFParser{constructor(e){this.data=e,this.numPages=0,this.pages=[]}async parse(){try{const e=await this.extractTextFromPDF(this.data),t=this.splitIntoPages(e);this.numPages=t.length,this.pages=t.map((e,t)=>({pageNum:t+1,text:e}))}catch(e){console.error("PDF parsing error:",e),this.numPages=1,this.pages=[{pageNum:1,text:"PDF content could not be extracted"}]}}async extractTextFromPDF(e){try{const t=new Uint8Array(e),n=new TextDecoder("utf-8");let s=n.decode(t);const o=s.match(/\([^)]+\)/g)||[],i=o.map(e=>e.slice(1,-1)).filter(e=>e.length>3&&!e.includes("\\")).join(" ");return i||"PDF content extracted"}catch(e){return"PDF content could not be extracted"}}splitIntoPages(e){const t=[/\f/g,/\n\s*\n\s*\n/g,/Page\s+\d+/gi,/^\d+$/gm];let n=[e];for(const s of t){if(n.length>1)break;n=e.split(s).filter(e=>e.trim().length>0)}return 0===n.length&&(n=[e]),n}getPage(e){const t=this.pages.find(t=>t.pageNum===e);if(!t)throw new Error(`Page ${e} not found`);return{getTextContent:async()=>({items:t.text.split(/\s+/).map(e=>({str:e}))})}}}
